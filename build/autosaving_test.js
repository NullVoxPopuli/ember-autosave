// Generated by CoffeeScript 1.6.3
var FakeModel, should;

should = chai.should();

Ember.AutoSavingController = Ember.ObjectController.extend(Ember.AutoSaving, {
  bufferedFields: ['key'],
  instaSaveFields: ['instaSaveKey']
});

FakeModel = Ember.Object.extend(Ember.Evented);

describe("A controller using the autoSaving mixin", function() {
  beforeEach(function() {
    this.controller = Ember.AutoSavingController.create();
    this.store = {};
    this.store.commit = sinon.spy();
    return this.model = FakeModel.create({
      store: this.store
    });
  });
  describe("when the model isn't inflight", function() {
    beforeEach(function() {
      return this.controller.set('content', this.model);
    });
    it("writes attributes directly to the model", function() {
      this.controller.set('key', 'value');
      return this.model.get('key').should.equal('value');
    });
    return it("reads attributes directly to the model", function() {
      this.model.set('key', 'value');
      return this.controller.get('key').should.equal('value');
    });
  });
  describe("when the model is saving", function() {
    beforeEach(function() {
      this.model.set('isSaving', true);
      return this.controller.set('content', this.model);
    });
    it("writes and reads attributes with a buffer", function() {
      this.controller.set('key', 'value');
      should.not.exist(this.model.get('key'));
      return this.controller.get('key').should.equal('value');
    });
    return it("writes attributes to the model when saving is complete", function() {
      this.controller.set('key', 'value');
      this.model.set('isSaving', false);
      return this.model.get('key').should.equal('value');
    });
  });
  return describe("Debounced saving", function() {
    beforeEach(function() {
      this.controller.set('content', this.model);
      return this.clock = sinon.useFakeTimers();
    });
    afterEach(function() {
      return this.clock.restore();
    });
    it("waits to save the model on a bufferedField", function() {
      this.controller.set('key', 'value');
      this.store.commit.called.should.be["false"];
      this.clock.tick(1000);
      return this.store.commit.called.should.be["true"];
    });
    it("immediately saves the model on an instaSaveField", function() {
      this.controller.set('instaSaveKey', 'value');
      return this.store.commit.called.should.be["true"];
    });
    return it("immediately saves the model when it is swapped", function() {
      this.controller.set('key', 'value');
      this.controller.set('content', {});
      this.store.commit.called.should.be["true"];
      return this.model.get('key').should.equal('value');
    });
  });
});
